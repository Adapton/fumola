//
// 2025-05-26 -- Playing with some ideas for a collections library.
// This code's status is still "sketch", not something nailed down. 
//
module { 
  public type Binary<X> = {
    symbol : Symbol;
    left : Pointer<SeqTree<X>>;
    right : Pointer<SeqTree<X>>;
  };

  public type Element<X> = {
    element : X;
    symbol : Symbol;
  };

  public type SeqTree<X> = {
    #empty;
    #element : Element<X>;
    #binary : Binary<X>;
  };

  func fromIterRec<X>(iter : Iter<(Symbol, X)>, left : SeqTree<X>, parentLevel : Nat) : SeqTree<X> {
    switch (iter.next()) {
      case null left;
      case (?(symbol, element)) {
         let level = prim "symbolLevel" symbol;
         if (level <= parentLevel) {
           let right = fromIter(iter, #element({symbol;element}), level);
           fromIter(iter, #binary({symbol;left;right}), parentLevel)
         } else {
           left
         }
      }
    }
  };

  public func fromIter<X>(iter : Iter<(Symbol, X)>) : SeqTree<X> {
    fromIterRec(iter, #empty, 0)
  };

  public func fromArray<X>(array : [(Symbol, X)]) : SeqTree<X> {
    fromIter(array.iter())
  };
};
